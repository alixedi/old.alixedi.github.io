<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Typewriter</title>
    <description>So I was feeling nostalgic...</description>
    <link>http://alixedi.github.io/</link>
    <atom:link href="http://alixedi.github.io/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Introducing Django Sieve</title>
        <description>&lt;p&gt;So we were developing a CRM-like system over at Bitswits. The users of the system were sales representatives of a telco. Without getting bogged down by the details, we were required to do the following from an access control perspective:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Each sales rep will be assigned a set of companies.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Each sales rep will be assigned a single country.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The sales rep will be able to access data from his assigned set of companies and the country &lt;em&gt;only&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These cute little features morphed into a monster because of the following scenario:&lt;/p&gt;

&lt;p&gt;So lets do a little operator overloading - if “&amp;gt;” signifies a foreign-key relation from the left-side operand to the right-side operand, we were dealing with situations such as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Rate &amp;gt; Tariff &amp;gt; Vendor &amp;gt; Company
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, some of the relations were ManyToMany - if “»” signifies a ManyToMany relation from the left-side operand to the right-side operand:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Rate &amp;gt; Tariff &amp;gt;&amp;gt; Client(s) &amp;gt; Comapny
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, consider the fact that the system had 100-odd views and we had a show-stopper. There was no way I could allow my precious Python devs to spend a couple of weeks writing and tuning queries by hand for what seemes like at least a couple of weeks.&lt;/p&gt;

&lt;p&gt;Enter Sieve. Following is whole code that solved the problem.&lt;/p&gt;

&lt;p&gt;Create the control model - the one that stores which sales rep has access to which companies and country:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sieve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ForeignKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Group&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;companies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ManyToManyField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Company&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;country&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ForeignKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Country&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Identify the sieve model in your settings.py:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SIEVE_MODEL = &#39;&#39;crm.Sieve&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Over-ride the ModelManagers for the models that you want filtered:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Country(models.Model):
        name = models.CharField(max_length=30)
        dialcode = models.DialcodeField()
        objects = SieveManager()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rock-on like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class CoutryView(ListView):
    objects = Country.objects.sieve(user=request.user)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That is all. Site-wide filtering of user data based on predefined criteria without having to write queries for all the views.&lt;/p&gt;
</description>
        <pubDate>Thu, 05 Jun 2014 15:53:00 +0500</pubDate>
        <link>http://alixedi.github.io/2014/06/05/introducing-django-sieve/</link>
        <guid isPermaLink="true">http://alixedi.github.io/2014/06/05/introducing-django-sieve/</guid>
      </item>
    
      <item>
        <title>Kill the rat</title>
        <description>&lt;p&gt;To replace a text with another for every file in a directory:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;grep -rl ‘‘ST2’’ ./&lt;/td&gt;
      &lt;td&gt;xargs sed -i ‘’s/ST2/Vim/g’’&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        <pubDate>Thu, 05 Jun 2014 01:08:14 +0500</pubDate>
        <link>http://alixedi.github.io/2014/06/05/kill-the-rat/</link>
        <guid isPermaLink="true">http://alixedi.github.io/2014/06/05/kill-the-rat/</guid>
      </item>
    
      <item>
        <title>Introducing Django Coffee Table</title>
        <description>&lt;p&gt;I was reading Things a little bird told me by Twitter co-founder Biz Stone the other day. I will review the work later but what stuck out as the take-away message is:&lt;/p&gt;

&lt;p&gt;Constraints drive innovation.&lt;/p&gt;

&lt;p&gt;Over at Bitswits - the startup that I have been running for the past couple of years, the biggest problem is HR. We cannot for the life of us get decent Python let alone Django developers in Pakistan. It seems .NET has a death grip on the campuses.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;On the other hand, it is significantly easier to hire good front-end people with some experience in templating. As a result, during the past year or so, Bitswits have evolved a spin on Django’s MVT (Model-View-Template) separation that we like to call M&lt;/td&gt;
      &lt;td&gt;V&lt;/td&gt;
      &lt;td&gt;T.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Essentially, a serious dearth of good Python hackers forces us to push every bit of presentation logic out to the templates. We do this by making template-composable web components.&lt;/p&gt;

&lt;p&gt;Coffee Table is one such project. Now I am not a big fan of re-inventing the wheel. So I thoroughly fiddled away at all the alternatives. Unfortunately, following example represents the state of affairs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class SimpleTable(Table):
    class Meta:
        model = Simple
        attrs = {&#39;&#39;class&#39;&#39;: &#39;&#39;mytable&#39;&#39;}
        sequence = (&quot;name&quot;, &quot;surname&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enough said. Now take a look at the equivalent Coffee Table syntax. Remember that we are not writing Python anymore. This takes place in Django templates:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% coffee_table 
   objects
   field_accessors=&#39;&#39;name, surname&#39;&#39; 
   table_class=&#39;&#39;table table-condensed&#39;&#39; %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And this is just the start. Following example shows off the full set of options:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% coffee_table 
   objects 
   field_accessors=&#39;&#39;name, surname&#39;&#39; 
   table_class=&#39;&#39;table table-condensed&#39;&#39; %}
   paginate_by=&#39;&#39;10&#39;&#39;
   checkbox_column=True
   primary_key_column=True
   help_text=True %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The result: HTML table that can be composed by HTML people. Problem solved.&lt;/p&gt;

&lt;p&gt;So you ask: Wonderful! now how the heck do I use this? Well, you can get Coffee Table via cheese shop:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install django_coffee_table
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Include coffee_table in your INSTALLED_APPS. Set up dependencies according to their respective docs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;linaro-django-pagination
django-resort
django-tag-parser
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now load up the template tags and rock-on like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% load coffee_table %}
{% coffe_table objects %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you find any issues, bones to pick, pat on the back or any other such business, head right over to Github and let it rip.&lt;/p&gt;
</description>
        <pubDate>Thu, 29 May 2014 18:05:00 +0500</pubDate>
        <link>http://alixedi.github.io/2014/05/29/introducing-django-coffee-table/</link>
        <guid isPermaLink="true">http://alixedi.github.io/2014/05/29/introducing-django-coffee-table/</guid>
      </item>
    
      <item>
        <title>Reimagining Codecademy.com — Where Technology &amp; Communications Meet Up to Get A Drink. — Medium</title>
        <description>&lt;p&gt;Reimagining Codecademy.com — Where Technology &amp;amp; Communications Meet Up to Get A Drink. — MediumThis is a wonderful post about designing pretty and functional web pages.&lt;/p&gt;
</description>
        <pubDate>Fri, 25 Apr 2014 10:21:27 +0500</pubDate>
        <link>http://alixedi.github.io/2014/04/25/reimagining-codecademy-com-where-technology/</link>
        <guid isPermaLink="true">http://alixedi.github.io/2014/04/25/reimagining-codecademy-com-where-technology/</guid>
      </item>
    
      <item>
        <title>Introducing Shootstrap</title>
        <description>&lt;p&gt;Lets you apply bootstrap css on selected divs like a boss:&lt;/p&gt;

&lt;div class=&quot;shoot&quot;&gt;
  &lt;div class=&quot;jumbotron&quot;&gt;
    &lt;h1&gt;Look at me I have Bootstrap baby!&lt;/h1&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;dont_shoot&quot;&gt;
  &lt;div class=&quot;jumbotron&quot;&gt;
    &lt;h1&gt;Show Off&lt;/h1&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Often, this is a life saver. For instance in case of the excellent Google Chart Editor that gets totally messed up on any page with bootstrap in it.&lt;/p&gt;

&lt;p&gt;In order to user Shootstrap, simply replace your regular bootstrap.css with shootstrap.css. You can compile shootstrap.css from the source using LESS etc or just use the pre-compiled one I have put here.&lt;/p&gt;

&lt;p&gt;This project is a fork of Twitter’s Bootstrap.&lt;/p&gt;

&lt;p&gt;Have fun.&lt;/p&gt;
</description>
        <pubDate>Thu, 24 Apr 2014 19:35:00 +0500</pubDate>
        <link>http://alixedi.github.io/2014/04/24/introducing-shootstrap/</link>
        <guid isPermaLink="true">http://alixedi.github.io/2014/04/24/introducing-shootstrap/</guid>
      </item>
    
      <item>
        <title>Malcolm Gladwell: Choice, happiness and spaghetti sauce | Talk Video | TED.com</title>
        <description>&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Malcolm Gladwell: Choice, happiness and spaghetti sauce&lt;/td&gt;
      &lt;td&gt;Talk Video&lt;/td&gt;
      &lt;td&gt;TED.comOn the fallacy of focus-groups and the epic saga of “chunky spaghetti sauce”.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        <pubDate>Mon, 21 Apr 2014 17:02:00 +0500</pubDate>
        <link>http://alixedi.github.io/2014/04/21/malcolm-gladwell-choice-happiness-and-spaghetti-sauce/</link>
        <guid isPermaLink="true">http://alixedi.github.io/2014/04/21/malcolm-gladwell-choice-happiness-and-spaghetti-sauce/</guid>
      </item>
    
      <item>
        <title>Django Hackathon Starter</title>
        <description>&lt;p&gt;The other day, I ran into the Node.js Hackathon Starter.&lt;/p&gt;

&lt;p&gt;Some people may argue against such projects because covering all the bases invariably introduces some cruft in the code base.&lt;/p&gt;

&lt;p&gt;Such criticism however, conveniently ignores the title of the project. A Hackathon Starter - by definition - is not designed to be a finished article.&lt;/p&gt;

&lt;p&gt;Starter noun: “an automatic device for starting a machine, esp. the engine of a vehicle.”&lt;/p&gt;

&lt;p&gt;Lets cut to the chase. In my opinion, following is a list of must-haves in a  hackathon starter package for Django:&lt;/p&gt;

&lt;p&gt;Theme-able, Responsive and Pain-free front-end scaffolding - Twitter Bootstrap
Comprehensive web analytics for tracking key metrics - Google Analytics
Local as well as Oauth authentication and account management - OneAll
Admin interface for housekeeping tasks - django-admin
Asset pipeline for packaging and compressing static files - django-pipeline
Deployment scripts for various hosting services - django-herokuapp
Integration with payment processors - lightening fast shop
API examples for popular services - OneAll
A blog with social integration - Syte
Test automation - Proofread
Naturally, the list above is not the last word on hackathon automation. I will be editing it as I think through this.&lt;/p&gt;
</description>
        <pubDate>Sun, 20 Apr 2014 19:56:00 +0500</pubDate>
        <link>http://alixedi.github.io/2014/04/20/django-hackathon-starter/</link>
        <guid isPermaLink="true">http://alixedi.github.io/2014/04/20/django-hackathon-starter/</guid>
      </item>
    
      <item>
        <title>Report | Curcle</title>
        <description>&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Report&lt;/td&gt;
      &lt;td&gt;CurcleHere is my curcle.co profile. Whats yours?&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        <pubDate>Fri, 18 Apr 2014 22:09:00 +0500</pubDate>
        <link>http://alixedi.github.io/2014/04/18/report-curcle/</link>
        <guid isPermaLink="true">http://alixedi.github.io/2014/04/18/report-curcle/</guid>
      </item>
    
      <item>
        <title>Hacker School User&#39;s Manual - Hacker School</title>
        <description>&lt;p&gt;Hacker School User’’s Manual - Hacker SchoolI love the social rules they have been able to derive.&lt;/p&gt;
</description>
        <pubDate>Thu, 17 Apr 2014 00:10:00 +0500</pubDate>
        <link>http://alixedi.github.io/2014/04/17/hacker-school-users-manual-hacker-school/</link>
        <guid isPermaLink="true">http://alixedi.github.io/2014/04/17/hacker-school-users-manual-hacker-school/</guid>
      </item>
    
      <item>
        <title>kennethreitz/flask-sockets</title>
        <description>&lt;p&gt;kennethreitz/flask-socketsCheck this out:&lt;/p&gt;

&lt;p&gt;from flask import Flask
from flask_sockets import Sockets&lt;/p&gt;

&lt;p&gt;app = Flask(&lt;strong&gt;name&lt;/strong&gt;)
sockets = Sockets(app)&lt;/p&gt;

&lt;p&gt;@sockets.route(‘‘/echo’’)
def echo_socket(ws):
    while True:
        message = ws.receive()
        ws.send(message)&lt;/p&gt;

&lt;p&gt;@app.route(‘’/’’)
def hello():
    return ‘‘Hello World!’’&lt;/p&gt;
</description>
        <pubDate>Wed, 16 Apr 2014 19:27:00 +0500</pubDate>
        <link>http://alixedi.github.io/2014/04/16/kennethreitz-flask-sockets/</link>
        <guid isPermaLink="true">http://alixedi.github.io/2014/04/16/kennethreitz-flask-sockets/</guid>
      </item>
    
  </channel>
</rss>
